<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <!-- ðŸ‘‡ Source generators must target netstandard 2.0 -->
    <TargetFramework>netstandard2.0</TargetFramework>
	<!-- ðŸ‘‡ We don't want to reference the source generator dll directly in consuming projects -->
	<IncludeBuildOutput>false</IncludeBuildOutput>
    <Description>A source generator for creating helper methods and extension methods on chars using a [EnumExtensions] attribute.</Description>
	<Nullable>enable</Nullable>
	<LangVersion>Latest</LangVersion>
    <PackageReadmeFile>README.md</PackageReadmeFile>
  </PropertyGroup>

  <!-- The following libraries include the source generator interfaces and types we need -->
  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.1.0" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.3" PrivateAssets="all" />
    <ProjectReference Include="..\CharGenerators.Attributes\CharGenerators.Attributes.csproj" PrivateAssets="all" />
  </ItemGroup>

  <!-- This ensures the library will be packaged as a source generator when we use `dotnet pack` -->
  <ItemGroup>
    <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    <None Include="$(OutputPath)\CharGenerators.Attributes.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    <None Include="$(OutputPath)\CharGenerators.Attributes.dll" Pack="true" PackagePath="lib\netstandard2.0" Visible="true" />
  </ItemGroup>

</Project>
