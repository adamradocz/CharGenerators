using System.Text;

namespace CharGenerators
{
    public static class SourceGenerationHelper
    {
        private const string Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Generator.CharGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable";

        public const string Attribute = Header + @"
namespace Generator.CharGenerators
{
    [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false)]
    public class CharExtensionsAttribute : System.Attribute
    {
        public string? OptimizeFor { get; set; }

        public bool Global { get; set; }
    }
}
";

        public static string GeneratePrivateHelperClass(ClassToGenerate classToGenerate)
        {
            var sb = new StringBuilder();
            sb.Append(Header);
            if (!string.IsNullOrEmpty(classToGenerate.Namespace))
            {
                sb.Append(@"
namespace ").Append(classToGenerate.Namespace).Append(@"
{");
            }

            sb.Append(@"
    ").Append($@"{classToGenerate.Accessibility.ToString().ToLower()} partial class {classToGenerate.Name}
    {{
        private string CharToStringFast(char value)
            => value switch
            {{");
            foreach (char optimizeFor in classToGenerate.OptimizeFor)
            {
                sb.Append($@"
                {GetSwitchSection(optimizeFor)}");
            }
            sb.Append($@"
                _ => value.ToString()
            }};
    }}");

            if (!string.IsNullOrEmpty(classToGenerate.Namespace))
            {
                sb.Append(@"
}");
            }

            return sb.ToString();
        }

        public static string GenerateExtensionClass(ClassToGenerate classToGenerate)
        {
            var sb = new StringBuilder();
            sb.Append(Header);
            if (!string.IsNullOrEmpty(classToGenerate.Namespace))
            {
                sb.Append(@"
namespace ").Append(classToGenerate.Namespace).Append(@"
{");
            }

            sb.Append(@"
    ").Append($@"public static partial class CharExtensions
    {{
        public static string ToStringFast(this char value)
            => value switch
            {{");
            foreach (char optimizeFor in classToGenerate.OptimizeFor)
            {
                sb.Append($@"
                {GetSwitchSection(optimizeFor)}");
            }
            sb.Append($@"
                _ => value.ToString()
            }};
    }}");
            if (!string.IsNullOrEmpty(classToGenerate.Namespace))
            {
                sb.Append(@"
}");
            }
            return sb.ToString();
        }

        private static string GetSwitchSection(char optimizeFor)
        {
            // Escape the character
            if (optimizeFor == '\'')
            {
                return @$"'\{optimizeFor}' => ""{optimizeFor}"",";
            }

            // Escape the string
            if (optimizeFor == '"')
            {
                return @$"'{optimizeFor}' => ""\{optimizeFor}"",";
            }

            // Escape the character and the string.
            if (optimizeFor == '\\')
            {
                return @$"'\{optimizeFor}' => ""\{optimizeFor}"",";
            }

            return @$"'{optimizeFor}' => ""{optimizeFor}"",";
        }
    }
}